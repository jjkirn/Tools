#
# Convert file containing ASCII hex to binary file
#
# JJK 4/13/19
#
from __future__ import print_function
import binascii
import struct
import string
import sys, getopt

def is_hex(s):  # check if it is a valid Hex digit
    try:
        int(s, 16)
        return True
    except ValueError:
        return False
#
def process(inpath, outpath):
   fo = open (outpath,"wb")  # open the outfile for write binary
   
   temp = ""
   mydata = ""
   mycnt = 0
   myhex = ""
   mybin = 0
   flag = True
   # loop through the input file character by character
   with open(inpath,"r") as fi:
      while flag:  # loop through file till EOF
         for i in range (0,2): # loop through 2 hex digits
            # Process a character at a time
            c = fi.read(1)
            if not c:
               print ('End of file')
               flag = False
               break  # exit for loop if EOF

            if c  == '\r' or c == '\n':
               # print (Either a cr or lf)
               continue  # skip end of line chars

            if is_hex(c) == True:   # make sure input data is a Hex Digit
                mycnt +=1
            else:                      # else exit program with error
               print ('***Bad Data in input file - exiting***')
               print ('char = {0}' .format(c) )
               flag = False
               break  # exit for-loop if "Bad data"

            temp = temp + temp.join(c)  # join the 2 Hex digits togther
            

         if not flag:  # exit for loop if EOF
            break

         # print (temp)  # show the 2 hex digits as hex(ascii)  
         myhex += temp   # create the long string of hex digites
         #print (myhex)
         temp = ''       # clear temp for next pass

   # write out the binary file from all the collected hex digits
   print (myhex)
   mybin = binascii.unhexlify(myhex)
   fo.write(mybin)
   print ('Characters processed = {0}' .format(mycnt) )
   fo.close  # close all files
   fi.close

def main(argv):
   # Default input and output file, can be overwritten by -i and -o options
 
   inpath = 'KT-B42.msg'  # input file, generated by tweet_exten.py
   outpath = 'out.bin'     # output file

   try:
      opts, args = getopt.getopt(argv,"hi:o:",["ifile=","ofile="])
   except getopt.GetoptError:
      print ('hexcvt2.py -i <inputfile> -o <outputfile>')
      sys.exit(2)
   for opt, arg in opts:
      if opt == '-h':
         print ('hexcvt2.py -i <inputfile> -o <outputfile>')
         sys.exit()

      elif opt in ("-i", "--ifile"):
         try:
            inpath = arg
            with open(inpath) as file:
               file.close
               pass
         except IOError as e:
            print('Input file [{0}] does not exist or can not be read!' .format(arg) )
            sys.exit()

      elif opt in ("-o", "--ofile"):
         outpath = arg
   print ('Input file is {0}' .format(inpath) )
   print ('Output file is {0}' .format(outpath) )
   process(inpath,outpath)
   print('Done!')

if __name__ == "__main__":
   main(sys.argv[1:])
